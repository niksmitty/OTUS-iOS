//
// CharacterModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CharacterModel: Codable, JSONEncodable, Hashable {

    public var id: String
    public var height: String?
    public var race: String
    public var gender: String?
    public var birth: String?
    public var spouse: String?
    public var death: String?
    public var realm: String?
    public var hair: String?
    public var name: String
    public var wikiUrl: String?

    public init(id: String, height: String? = nil, race: String, gender: String? = nil, birth: String? = nil, spouse: String? = nil, death: String? = nil, realm: String? = nil, hair: String? = nil, name: String, wikiUrl: String? = nil) {
        self.id = id
        self.height = height
        self.race = race
        self.gender = gender
        self.birth = birth
        self.spouse = spouse
        self.death = death
        self.realm = realm
        self.hair = hair
        self.name = name
        self.wikiUrl = wikiUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "_id"
        case height
        case race
        case gender
        case birth
        case spouse
        case death
        case realm
        case hair
        case name
        case wikiUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encode(race, forKey: .race)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(birth, forKey: .birth)
        try container.encodeIfPresent(spouse, forKey: .spouse)
        try container.encodeIfPresent(death, forKey: .death)
        try container.encodeIfPresent(realm, forKey: .realm)
        try container.encodeIfPresent(hair, forKey: .hair)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(wikiUrl, forKey: .wikiUrl)
    }
}

